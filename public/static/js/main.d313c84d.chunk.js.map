{"version":3,"sources":["components/navigation/AppNavigation.js","components/picturecomponents/AppPicture.js","components/humcomponents/AppCardHum.js","components/textcomponents/AppCardText.js","components/filecomponents/AppCardFile.js","components/HomeView.js","serviceClient.js","components/humcomponents/NoMatch.js","components/humcomponents/HumResults.js","components/humcomponents/ErrorComponent.js","components/Progress.js","components/Latency.js","components/humcomponents/InfoCardHum.js","components/humcomponents/HumRecord.js","components/textcomponents/InfoCardText.js","components/textcomponents/NoTextMatch.js","components/textcomponents/LyricBox.js","components/textcomponents/TextResult.js","components/textcomponents/TextTest.js","components/filecomponents/FileErrorComponent.js","components/filecomponents/FileResult.js","components/filecomponents/FileTest.js","components/PageNotFound.js","components/aboutcomponents/Aboutstats.js","components/aboutcomponents/About.js","App.js","serviceWorker.js","index.js"],"names":["AppNavigation","react_default","a","createElement","Container","Navbar","collapseOnSelect","expand","bg","variant","Brand","react_router_dom","to","src","width","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Badge","Component","AppPicture","Card","Img","ImgOverlay","Title","Text","AppCardHum","border","style","Body","Button","AppCardText","AppCardFile","HomeView","picturecomponents_AppPicture","Row","Col","filecomponents_AppCardFile","humcomponents_AppCardHum","textcomponents_AppCardText","postFile","_x","_x2","_postFile","apply","this","arguments","_callee","data","path","formData","options","res","jsonRes","regenerator_default","wrap","_context","prev","next","FormData","append","method","mode","mimeType","body","fetch","sent","ok","Error","status","json","success","abrupt","message","t0","stop","_callee2","bodyData","result","_context2","JSON","stringify","headers","Content-Type","Accept","NoMatch","props","HumResults","items","length","humcomponents_NoMatch","itemList","sort","item1","item2","score","map","item","index","key","Header","title","artist","dist_default","initialAnimation","percentage","strokeWidth","text","concat","styles","stroke","fill","fontSize","spotifyResult","sm","Image","imgUrl","thumbnail","albumName","releaseDate","Link","href","trackUrl","target","maxWidth","React","ErrorComponent","msg","Progress","ProgressBar","min","max","now","label","Latency","Spinner","animation","size","role","InfoCardHum","md","HumRecord","state","mediaRecorder","isSearching","isRecording","results","error","error_message","progressTime","progressLabel","recInterval","recLabel","onStart","_this","start","setState","setInterval","increaseProgress","increaseLabel","recMaxTime","setTimeout","onStop","clearInterval","logger","console","log","clearTimeout","_this2","navigator","mediaDevices","blob","chunks","getUserMedia","audio","then","stream","MediaRecorder","mutableRecorder","onstop","e","Blob","type","catch","ondataavailable","push","humcomponents_InfoCardHum","onClick","src_components_Progress","components_Latency","humcomponents_ErrorComponent","humcomponents_HumResults","rec","InfoCardText","NoTextMatch","LyricBox","context","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","open","matched","matchString","RegExp","toMatch","replace","aria-expanded","in","Parser","TextResult","textcomponents_NoTextMatch","content","textcomponents_LyricBox","lyrics","match","TextTest","handleSubmit","bind","assertThisInitialized","url","loading","preventDefault","field","refs","value","_x3","_postLyrics","postLyrics","encodeURI","textcomponents_InfoCardText","Form","onSubmit","Group","controlId","Label","Control","as","rows","placeholder","ref","required","textcomponents_TextResult","FileErrorComponent","FileResult","FileTest","file","toFixed","err","handleFileChange","files","onChange","filecomponents_FileErrorComponent","filecomponents_FileResult","PageNotFound","Aboutstats","s","pill","filecount","fileresultok","fileresultnok","humcount","humresultok","humresultnok","lyricscount","lyricsresultok","lyricsresultnok","About","response","aboutcomponents_Aboutstats","App","navigation_AppNavigation","react_router","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d313c84d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Navbar, Nav, Container, Badge } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './styles/AppNavigation.css';\r\n\r\nclass AppNavigation extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\">\r\n                    <Navbar.Brand>\r\n                        <Link to=\"/\">\r\n                            <img src=\"/tunesterr.png\" width=\"120\" height=\"50\" className=\"d-inline-block align-top\" alt=\"React Bootstrap logo\" />\r\n                        </Link>\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\r\n                        <Nav>\r\n                            <Link className=\"custom-nav-link\" to=\"/filetest\">\r\n                                <Badge variant=\"secondary\">Test File</Badge>\r\n                            </Link>\r\n                            <Link className=\"custom-nav-link\" to=\"/humrecord\">\r\n                                <Badge variant=\"secondary\">Test Hum</Badge>\r\n                            </Link>\r\n                            <Link className=\"custom-nav-link\" to=\"/texttest\">\r\n                                <Badge variant=\"secondary\">Test Lyrics</Badge>\r\n                            </Link>\r\n                            <Link className=\"custom-nav-link\" to=\"/about\">\r\n                                <Badge variant=\"secondary\">About</Badge>\r\n                            </Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppNavigation;\r\n","import React, { Component } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport './styles/AppPicture.css';\r\n\r\nclass AppPicture extends Component {\r\n    render() {\r\n        return (\r\n            <Card className=\"bg-dark text-white\" id=\"imagecard\">\r\n                <Card.Img src=\"background2.png\" alt=\"Card image\" />\r\n                <Card.ImgOverlay>\r\n                    <Card.Title>\r\n                        Do you feel that your song has already been written? Fear not my Friend!\r\n                        <br />\r\n                        TEST YOUR SONG WITH TUNESTERR!\r\n                    </Card.Title>\r\n                    <Card.Text />\r\n                </Card.ImgOverlay>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppPicture;\r\n","import React, { Component } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AppCardHum extends Component {\r\n    render() {\r\n        return (\r\n            <Card border=\"dark\" style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src=\"testpic.png\" />\r\n                <Card.Body>\r\n                    <Card.Title>Test by humming</Card.Title>\r\n                    <Card.Text>Test your song by humming and get matching results.</Card.Text>\r\n                    <Link to=\"/humrecord\">\r\n                        <Button variant=\"primary\">Test</Button>\r\n                    </Link>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppCardHum;\r\n","import React, { Component } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AppCardText extends Component {\r\n    render() {\r\n        return (\r\n            <Card border=\"dark\" style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src=\"textpic.png\" />\r\n                <Card.Body>\r\n                    <Card.Title>Test your lyrics</Card.Title>\r\n                    <Card.Text>Test your song lyrics and get matching results.</Card.Text>\r\n                    <Link to=\"/texttest\">\r\n                        <Button variant=\"primary\">Test</Button>\r\n                    </Link>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppCardText;","import React, { Component } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AppCardFile extends Component {\r\n    render() {\r\n        return (\r\n            <Card border=\"dark\" style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src=\"filepic.png\" />\r\n                <Card.Body>\r\n                    <Card.Title>Test audiofile</Card.Title>\r\n                    <Card.Text>Test your produced audiofile and get matching results.</Card.Text>\r\n                    <Link to=\"/filetest\">\r\n                        <Button variant=\"primary\">Test</Button>\r\n                    </Link>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppCardFile;\r\n","import React, { Component } from 'react';\r\nimport AppPicture from '../components/picturecomponents/AppPicture';\r\nimport AppCardHum from '../components/humcomponents/AppCardHum';\r\nimport AppCardText from '../components/textcomponents/AppCardText';\r\nimport AppCardFile from '../components/filecomponents/AppCardFile';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nexport default class HomeView extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AppPicture />\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <AppCardFile />\r\n                        </Col>\r\n                        <Col>\r\n                            <AppCardHum />\r\n                        </Col>\r\n                        <Col>\r\n                            <AppCardText />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","export async function postFile(data, path) {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append('audiofile', data);\r\n        const options = {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            mimeType: 'multipart/form-data',\r\n            body: formData\r\n        };\r\n        let res = await fetch('http://loppuprojekti-env.4wv6cxwtgr.eu-central-1.elasticbeanstalk.com/' + path, options);\r\n        if (!res.ok) throw new Error(res.status, res);\r\n        let jsonRes = await res.json();\r\n        if (jsonRes.success) {\r\n            return jsonRes.message;\r\n        } else {\r\n            throw new Error(jsonRes.message);\r\n        }\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function postLyrics(bodyData) {\r\n    const options = {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        body: JSON.stringify(bodyData),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json'\r\n        }\r\n    };\r\n    try {\r\n        let result = await fetch('http://loppuprojekti-env.4wv6cxwtgr.eu-central-1.elasticbeanstalk.com/lyrics', options);\r\n        let jsonRes = await result.json();\r\n        if (jsonRes.success) {\r\n            return jsonRes.message;\r\n        } else {\r\n            throw new Error(jsonRes.message);\r\n        }\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}","import React from 'react'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst NoMatch = props => {\r\n    return (\r\n        <Card>\r\n            <Card.Title>No matches were found for your melody!</Card.Title>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React from 'react';\r\nimport { Card, Image, Row, Col } from 'react-bootstrap';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport './styles/HumResults.css';\r\nimport NoMatch from './NoMatch';\r\n\r\nclass HumResults extends React.Component {\r\n    render() {\r\n        if (this.props.items.length === 0) {\r\n            return <NoMatch />;\r\n        }\r\n\r\n        let itemList = this.props.items\r\n            .sort((item1, item2) => item2.score - item1.score)\r\n            .map((item, index) => {\r\n                return (\r\n                    <Card className=\"text-center\" key={index}>\r\n                        <Card.Header>\r\n                            Matched <strong>{item.title}</strong> by {item.artist} &nbsp;\r\n                            <CircularProgressbar\r\n                                initialAnimation={true}\r\n                                percentage={item.score}\r\n                                strokeWidth={10}\r\n                                text={`${item.score}%`}\r\n                                styles={{ path: { stroke: '#4cbc40' }, text: { fill: ' #4cbc40', fontSize: '1.6rem' } }}\r\n                            />\r\n                        </Card.Header>\r\n                        {item.spotifyResult ? (\r\n                            <Card.Body>\r\n                                <Row className=\"hum-result-card-row\">\r\n                                    <Col sm={4}>\r\n                                        <Image src={item.spotifyResult.imgUrl || ''} thumbnail />\r\n                                    </Col>\r\n                                    <Col sm={4}>\r\n                                        {item.spotifyResult.albumName || 'N/A'} <br /> ({item.spotifyResult.releaseDate || 'N/A'})\r\n                                    </Col>\r\n                                    <Col sm={4}>\r\n                                        Listen on Spotify\r\n                                        <Card.Link href={item.spotifyResult.trackUrl} target=\"_blank\">\r\n                                            <Image style={{ maxWidth: '35px' }} src=\"Spotify_Icon.png\" />\r\n                                        </Card.Link>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        ) : (\r\n                            <Card.Body>No Spotify result</Card.Body>\r\n                        )}\r\n                    </Card>\r\n                );\r\n            });\r\n        return <div>{itemList}</div>;\r\n    }\r\n}\r\n\r\nexport default HumResults;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst ErrorComponent = props => {\r\n    return (\r\n        <Card>\r\n            <Card.Title>Error: {props.msg}</Card.Title>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\nimport './Progress.css';\r\n\r\nconst Progress = props => {\r\n    return <ProgressBar min={0} max={20} now={props.now} label={`${props.label} sec`} style={{ width: '100%' }} />;\r\n};\r\n\r\nexport default Progress;\r\n","import React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nclass Latency extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Latency;\r\n","import React, { Component } from 'react';\r\nimport { Row, Card, Col } from 'react-bootstrap';\r\n\r\nclass InfoCardHum extends Component {\r\n    render() {\r\n        return (\r\n               <Row>\r\n                    <Col md={2} />\r\n                    <Col md={8}>\r\n                        <Card>\r\n                            <Card.Header></Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Title>Test your song by humming</Card.Title>\r\n                                <Card.Text>\r\n                                    Hum away your tune and get matching results.\r\n                            </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={2} />\r\n                </Row>           \r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoCardHum;","import React from 'react';\r\nimport { postFile } from '../../serviceClient';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport './styles/HumRecord.css';\r\nimport HumResults from './HumResults';\r\nimport ErrorComponent from './ErrorComponent';\r\nimport Progress from '../Progress';\r\nimport Latency from '../Latency';\r\nimport InfoCardHum from './InfoCardHum';\r\n\r\nexport default class HumRecord extends React.Component {\r\n    state = {\r\n        mediaRecorder: null,\r\n        isSearching: false,\r\n        isRecording: false,\r\n        results: '',\r\n        error: false,\r\n        error_message: '',\r\n        progressTime: 0,\r\n        progressLabel: 0,\r\n        recInterval: null,\r\n        recLabel: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!navigator.mediaDevices) {\r\n            this.setState({ error: true, error_message: 'getUserMedia not supported on this browser' });\r\n            return;\r\n        }\r\n        let blob,\r\n            chunks = [];\r\n        navigator.mediaDevices\r\n            .getUserMedia({ audio: true })\r\n            .then(stream => {\r\n                this.setState({ mediaRecorder: new MediaRecorder(stream) });\r\n                let mutableRecorder = this.state.mediaRecorder;\r\n                mutableRecorder.onstop = e => {\r\n                    this.setState({ isSearching: true, isRecording: false });\r\n                    blob = new Blob(chunks, { type: 'audio/ogg; codecs=opus' });\r\n                    chunks = [];\r\n                    postFile(blob, 'hum')\r\n                        .then(res => {\r\n                            this.setState({ results: res, isSearching: false });\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(error);\r\n                            this.setState({\r\n                                isSearching: false,\r\n                                isRecording: false,\r\n                                error: true,\r\n                                error_message: error.message\r\n                            });\r\n                        });\r\n                };\r\n                mutableRecorder.ondataavailable = e => {\r\n                    chunks.push(e.data);\r\n                };\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                this.setState({\r\n                    isSearching: false,\r\n                    isRecording: false,\r\n                    error: true,\r\n                    error_message: 'Mediarecorder failed to start..'\r\n                });\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({ mediaRecorder: null, isSearching: false, isRecording: false });\r\n        clearInterval(this.state.recInterval);\r\n        clearInterval(this.state.recLabel);\r\n    }\r\n\r\n    onStart = () => {\r\n        if (!this.state.mediaRecorder || this.state.mediaRecorder.state === 'recording') {\r\n            console.log('Mediarecorder is not defined or already recording');\r\n            return;\r\n        }\r\n        this.state.mediaRecorder.start();\r\n        this.setState({\r\n            results: '',\r\n            isRecording: true,\r\n            progressTime: 0,\r\n            progressLabel: 0,\r\n            recInterval: setInterval(this.increaseProgress, 100),\r\n            recLabel: setInterval(this.increaseLabel, 1000),\r\n            recMaxTime: setTimeout(() => {\r\n                this.onStop();\r\n                clearInterval(this.state.recInterval);\r\n                clearInterval(this.state.recLabel);\r\n            }, 20 * 1000)\r\n        });\r\n        logger(this.state.mediaRecorder);\r\n    };\r\n\r\n    onStop = () => {\r\n        if (!this.state.mediaRecorder || this.state.mediaRecorder.state === 'inactive') {\r\n            console.log('Mediarecorder is not defined or already inactive');\r\n            return;\r\n        }\r\n        clearInterval(this.state.recInterval);\r\n        clearInterval(this.state.recLabel);\r\n        clearTimeout(this.state.recMaxTime);\r\n        this.state.mediaRecorder.stop();\r\n        logger(this.state.mediaRecorder);\r\n    };\r\n\r\n    increaseProgress = () => {\r\n        this.setState({ progressTime: this.state.progressTime + 0.1 });\r\n    };\r\n\r\n    increaseLabel = () => {\r\n        this.setState({ progressLabel: this.state.progressLabel + 1 });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <InfoCardHum />\r\n                <Row>\r\n                    <Col md={3} />\r\n                    <Col md={6}>\r\n                        <i className={this.state.isRecording ? 'fas fa-circle fa-3x Rec' : 'fas fa-circle fa-3x'} onClick={this.onStart} />\r\n                        <i className=\"fa fa-stop fa-3x\" onClick={this.onStop} />\r\n                    </Col>\r\n                    <Col md={3} />\r\n                </Row>\r\n                <Row>\r\n                    <Col md={3} />\r\n                    <Col md={6}>\r\n                        <Progress now={this.state.progressTime} label={this.state.progressLabel} />\r\n                    </Col>\r\n                    <Col md={3} />\r\n                </Row>\r\n                <Row>\r\n                    <Col md={3} />\r\n                    <Col md={6}>\r\n                        {this.state.isSearching ? <Latency /> : <div />}\r\n                        {this.state.error ? <ErrorComponent msg={this.state.error_message} /> : <div />}\r\n                        {this.state.results ? <HumResults items={this.state.results} /> : <div />}\r\n                    </Col>\r\n                    <Col md={3} />\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst logger = rec => {\r\n    console.log('====== ' + rec.state + ' ======');\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Row, Card, Col } from 'react-bootstrap';\r\n\r\nclass InfoCardText extends Component {\r\n    render() {\r\n        return (\r\n               <Row>\r\n                    <Col md={2} />\r\n                    <Col md={8}>\r\n                        <Card>\r\n                            <Card.Header></Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Title>Test your lyrics</Card.Title>\r\n                                <Card.Text>\r\n                                    Write your lyrics below and find matching results.\r\n                            </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={2} />\r\n                </Row>           \r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoCardText;","import React from 'react'\r\nimport { Card, Col, Row } from 'react-bootstrap';\r\n\r\nconst NoTextMatch = props => {\r\n    return (\r\n        <Row>\r\n            <Col md={2} />\r\n            <Col md={8}>\r\n                <Card>\r\n                    <Card.Title>No matches were found for your text!</Card.Title>\r\n                </Card>\r\n            </Col>\r\n            <Col md={2} />\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default NoTextMatch;","import React, { Component } from 'react';\r\nimport { Button, Collapse } from 'react-bootstrap';\r\nimport Parser from 'html-react-parser';\r\nimport './styles/LyricBox.css';\r\n\r\nclass LyricBox extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            open: false,\r\n            matched: 'mountain high'\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { open } = this.state;\r\n\r\n        let matchString = new RegExp(this.props.toMatch, \"gi\")\r\n        let matched = this.props.text.replace(matchString, \"<span>\" + this.props.toMatch + \"</span>\");\r\n\r\n        return (\r\n            <div>\r\n                <Button onClick={() => this.setState({ open: !open })} aria-controls=\"example-collapse-text\" aria-expanded={open}>\r\n                    Get lyrics\r\n                </Button>\r\n                <Collapse in={this.state.open}>\r\n                    <div id=\"example-collapse-text\">{Parser(matched)}</div>\r\n                </Collapse>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LyricBox;\r\n","import React from 'react';\r\nimport NoTextMatch from './NoTextMatch';\r\nimport { Card, Col, Row } from 'react-bootstrap';\r\nimport LyricBox from './LyricBox';\r\n\r\nconst TextResult = props => {\r\n    if (props.items.length === 0) {\r\n        return <NoTextMatch />;\r\n    }\r\n    const content = props.items.map((item, index) => (\r\n        <Row key={index}>\r\n            <Col md={2} />\r\n            <Col md={8}>\r\n                <Card>\r\n                    <Card.Header>Artist: {item.artist}</Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>Song title: {item.title}</Card.Title>\r\n                        <div>\r\n                            <LyricBox text={item.lyrics} toMatch={props.match} />\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n            <Col md={2} />\r\n        </Row>\r\n    ));\r\n\r\n    return <div>{content}</div>;\r\n};\r\n\r\nexport default TextResult;\r\n","import React, { Component } from 'react';\r\nimport { Button, Form, Col, Row, Container } from 'react-bootstrap';\r\nimport { postLyrics } from '../../serviceClient';\r\nimport Latency from '../Latency';\r\nimport InfoCardText from './InfoCardText';\r\nimport './styles/TextTest.css';\r\nimport TextResult from './TextResult';\r\n\r\nclass TextTest extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.state = { url: '/', data: '', loading: false, error: false };\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.setState({ loading: true, data: '', match: '' });\r\n\r\n        const formData = {};\r\n        for (const field in this.refs) {\r\n            formData[field] = this.refs[field].value;\r\n        }\r\n\r\n        this.setState({ match: formData.text});\r\n        var res = encodeURI(formData.text);\r\n        var bodyUrl = 'https://audd.p.rapidapi.com/findLyrics/?q=' + res;\r\n        var bodyData = { url: bodyUrl };\r\n\r\n        postLyrics(bodyData)\r\n            .then(res => {\r\n                this.setState({ data: res.result, loading: false });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ data: [], error: true, loading: false });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <InfoCardText />\r\n                <Row>\r\n                    <Col md={2} />\r\n                    <Col md={8}>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\" className=\"textfield\">\r\n                                <Form.Label>Write your lyrics</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows=\"2\" type=\"text\" placeholder=\"\" ref=\"text\" required/>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Test\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={2} />\r\n                </Row>\r\n                <br />\r\n                {this.state.loading ? <Latency /> : <div />}\r\n                {this.state.data ? <TextResult items={this.state.data} match={this.state.match} /> : <div />}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextTest;\r\n","import React from 'react';\r\n\r\nconst FileErrorComponent = props => {\r\n    return <div>{props.msg}</div>;\r\n};\r\n\r\nexport default FileErrorComponent;\r\n","import React from 'react';\r\nimport { Card, Image, Row, Col } from 'react-bootstrap';\r\n\r\nconst FileResult = props => {\r\n    if (!props.item.artist) {\r\n        return <div>No Results</div>;\r\n    }\r\n    return (\r\n        <Card className=\"text-center\">\r\n            <Card.Header>\r\n                Matched <strong>{props.item.title}</strong> by {props.item.artist} &nbsp;\r\n            </Card.Header>\r\n            {props.item.spotifyResult ? (\r\n                <Card.Body>\r\n                    <Row className=\"hum-result-card-row\">\r\n                        <Col md={4}>\r\n                            <Image src={props.item.spotifyResult.imgUrl || ''} thumbnail />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <span>\r\n                                {' '}\r\n                                {props.item.spotifyResult.albumName || 'N/A'} <br /> ({props.item.spotifyResult.releaseDate || 'N/A'})\r\n                            </span>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            Listen on Spotify <br />\r\n                            <Card.Link href={props.item.spotifyResult.trackUrl} target=\"_blank\">\r\n                                <Image style={{ maxWidth: '35px' }} src=\"Spotify_Icon.png\" />\r\n                            </Card.Link>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            ) : (\r\n                <Card.Body>No Spotify result</Card.Body>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FileResult;\r\n","import React, { Component } from 'react';\r\nimport { Form, Button, Card } from 'react-bootstrap';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { postFile } from '../../serviceClient';\r\nimport Latency from '../Latency';\r\nimport FileErrorComponent from './FileErrorComponent';\r\nimport FileResult from './FileResult';\r\nimport './styles/FileTest.css';\r\n\r\nclass FileTest extends Component {\r\n    state = { file: null, isSearching: false, error: false, error_message: '', results: '' };\r\n\r\n    handleSubmit = async e => {\r\n        e.preventDefault();\r\n        if (this.state.file.size > 1.5 * 1000000) {\r\n            // client side validation for courtecy\r\n            this.setState({ error: true, error_message: 'Max filesize 1MB, selected file ' + (this.state.file.size / 1000000).toFixed(2) + 'MB' });\r\n            return;\r\n        }\r\n        if (!this.state.file) {\r\n            this.setState({ error: true, error_message: 'No file selected!' });\r\n            return;\r\n        }\r\n        this.setState({ isSearching: true, results: '', error: false, error_message: '' });\r\n        postFile(this.state.file, 'file')\r\n            .then(res => {\r\n                this.setState({ results: res, isSearching: false });\r\n            })\r\n            .catch(err => {\r\n                this.setState({ error: true, error_message: 'File upload failed: ' + err.message, isSearching: false });\r\n            });\r\n    };\r\n\r\n    handleFileChange = e => {\r\n        this.setState({ file: e.target.files[0] });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md={2} />\r\n                    <Col md={8}>\r\n                        <Card>\r\n                            <Card.Header />\r\n                            <Card.Body>\r\n                                <Card.Title>Test your produced song</Card.Title>\r\n                                <Card.Text>Test your song by sending .mp3 or .ogg -file and get matching results.</Card.Text>\r\n                            </Card.Body>\r\n                            <Form onSubmit={this.handleSubmit} className=\"file-form\">\r\n                                <Form.Group controlId=\"file-upload-field\">\r\n                                    <Form.Control type=\"file\" placeholder=\"File\" onChange={this.handleFileChange} />\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Send\r\n                                </Button>\r\n                            </Form>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={2} />\r\n                </Row>\r\n                <Row>\r\n                    <Col md={2} />\r\n                    <Col md={8}>\r\n                        {this.state.error ? <FileErrorComponent msg={this.state.error_message} /> : <div />}\r\n                        {this.state.isSearching ? <Latency /> : <div />}\r\n                        {this.state.results ? <FileResult item={this.state.results} /> : <div />}\r\n                    </Col>\r\n                    <Col md={2} />\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileTest;\r\n","import React, { Component } from 'react';\r\n\r\nclass PageNotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>This page does not exist</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nconst Aboutstats = props => {\r\n    if (props.data.length === 0) {\r\n        return <div />;\r\n    }\r\n    return props.data.map((s, index) => {\r\n        return (\r\n            <div key={index}>\r\n                <h5>The Track Records of The Service</h5>\r\n                <span className=\"stats\">Audiofile tests / match found / no match</span>\r\n                <br />\r\n                <Badge pill variant=\"warning\">\r\n                    {s.filecount}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"secondary\">\r\n                    {s.fileresultok}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"success\">\r\n                    {s.fileresultnok}\r\n                </Badge>\r\n                <br />\r\n                <span className=\"stats\">Hum recordings / match found / no match</span>\r\n                <br />\r\n                <Badge pill variant=\"warning\">\r\n                    {s.humcount}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"secondary\">\r\n                    {s.humresultok}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"success\">\r\n                    {s.humresultnok}\r\n                </Badge>\r\n                <br />\r\n                <span className=\"stats\">Lyrics sent / match found / no match</span>\r\n                <br />\r\n                <Badge pill variant=\"warning\">\r\n                    {s.lyricscount}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"secondary\">\r\n                    {s.lyricsresultok}\r\n                </Badge>{' '}\r\n                /{' '}\r\n                <Badge pill variant=\"success\">\r\n                    {s.lyricsresultnok}\r\n                </Badge>\r\n            </div>\r\n        );\r\n    });\r\n};\r\n\r\n// class Aboutstats extends Component {\r\n\r\n//     render() {\r\n\r\n//         if (this.props.data.length == 0) {\r\n//             return <div />\r\n//         } else {\r\n//             const stats = this.props.data.map((s, index) => {\r\n//                 return (<div>\r\n//                     <p>The Track Records of The Service</p>\r\n//                     Audiofile tests / match found / no match < br />\r\n//                     {s.filecount} / {s.fileresultok} / {s.fileresultnok}\r\n//                     < br />\r\n//                     Hum recordings / match found / no match < br />\r\n//                     {s.humcount} / {s.humresultok} / {s.humresultnok}\r\n//                     < br />\r\n//                     Lyrics sent / match found / no match < br />\r\n//                     {s.lyricscount} / {s.lyricsresultok} / {s.lyricsresultnok}\r\n//                 </div>)\r\n//             })\r\n//         }\r\n\r\n//         return (\r\n//             <div>\r\n//                 { stats }\r\n//             </div >\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default Aboutstats;\r\n","import React, { Component } from 'react';\r\nimport { Card, Col, Row } from 'react-bootstrap';\r\nimport Latency from '../Latency';\r\nimport Aboutstats from './Aboutstats';\r\nimport './styles/about.css';\r\n\r\nclass About extends Component {\r\n\r\n    state = { data: [] };\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://loppuprojekti-env.4wv6cxwtgr.eu-central-1.elasticbeanstalk.com/about\",\r\n            {\r\n                mode: 'cors',\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                console.log('Statistics retrieved successfully', response);\r\n                this.setState({ data: response });\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Row>\r\n            <Col md={3} />\r\n            <Col md={6}>\r\n                <Card>\r\n                    <Card.Header></Card.Header>\r\n                    <Card.Body>\r\n                    <Card.Title>About Tunesterr</Card.Title>\r\n                        <p>Tunesterr is an awesome application which helps you to validate if your song/composition would be an unintentional plagiarism</p>\r\n                        <p>It offers you three types of tests:</p>\r\n                        <ul>\r\n                            <li>Test Audiofile - You can upload a audiofile and the service tries to match it...</li>\r\n                            <li>Test by Humming - You can record a hum and the service tries to match it...</li>\r\n                            <li>Test Your Lyrics - You can enter a text and the service tries to match it...</li>\r\n                        </ul>\r\n                        <p>...with over <span>42,500,000</span> songs in the database.</p>\r\n                        <p>The results of audiofile match includes the links to the matched songs in Spotify. The results of hum match includes also the match score (percentage) for all the matched songs. The results of matched lyrics display all the lyrics of all the matched songs.</p>\r\n                        {this.state.data.length === 0 ? <Latency /> : <Aboutstats data={this.state.data}/>}\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n            <Col md={3} />\r\n        </Row>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport AppNavigation from './components/navigation/AppNavigation';\r\nimport HomeView from './components/HomeView';\r\nimport HumRecord from './components/humcomponents/HumRecord';\r\nimport TextTest from './components/textcomponents/TextTest';\r\nimport FileTest from './components/filecomponents/FileTest';\r\nimport PageNotFound from './components/PageNotFound';\r\nimport About from './components/aboutcomponents/About';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router>\r\n                    <AppNavigation />\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={HomeView} />\r\n                        <Route exact path=\"/humrecord\" component={HumRecord} />\r\n                        <Route exact path=\"/texttest\" component={TextTest} />\r\n                        <Route exact path=\"/filetest\" component={FileTest} />\r\n                        <Route exact path=\"/about\" component={About} />\r\n                        <Route path=\"**\" component={PageNotFound} />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}